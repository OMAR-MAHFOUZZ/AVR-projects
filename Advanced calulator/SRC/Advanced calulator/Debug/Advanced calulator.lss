
Advanced calulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000dce  00000e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  000015a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb6  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046d  00000000  00000000  0000267e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000908  00000000  00000000  00002aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  000033f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000275  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000092f  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00004174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e5 06 	jmp	0xdca	; 0xdca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
  9e:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_init>
	keypad_vinit();
  a2:	0e 94 61 05 	call	0xac2	; 0xac2 <keypad_vinit>
#include "keypad.h"
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
  a6:	0f 2e       	mov	r0, r31
  a8:	f3 e0       	ldi	r31, 0x03	; 3
  aa:	8f 2e       	mov	r8, r31
  ac:	99 24       	eor	r9, r9
  ae:	f0 2d       	mov	r31, r0
  b0:	8c 0e       	add	r8, r28
  b2:	9d 1e       	adc	r9, r29
  b4:	0f 2e       	mov	r0, r31
  b6:	f5 e0       	ldi	r31, 0x05	; 5
  b8:	6f 2e       	mov	r6, r31
  ba:	77 24       	eor	r7, r7
  bc:	f0 2d       	mov	r31, r0
  be:	6c 0e       	add	r6, r28
  c0:	7d 1e       	adc	r7, r29
					{
						LCD_vsend_char(res+48);
					}
					else if(res<100)
					{
						LCD_vsend_char(res/10+48);
  c2:	0f 2e       	mov	r0, r31
  c4:	fa e0       	ldi	r31, 0x0A	; 10
  c6:	2f 2e       	mov	r2, r31
  c8:	33 24       	eor	r3, r3
  ca:	f0 2d       	mov	r31, r0
#include <util/delay.h>

int main(void)
{
	LCD_init();
	keypad_vinit();
  cc:	8e 01       	movw	r16, r28
  ce:	0f 5f       	subi	r16, 0xFF	; 255
  d0:	1f 4f       	sbci	r17, 0xFF	; 255
		/***********************************************************/
			for(i=0;i<2;i++)
			{
				do
				{
					num1[i]=keypad_checkpress();
  d2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <keypad_checkpress>
  d6:	d8 01       	movw	r26, r16
  d8:	8c 93       	st	X, r24
				} while (num1[i]==NOT_PRESSED);
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	d1 f3       	breq	.-12     	; 0xd2 <main+0x40>
				LCD_vsend_char(num1[i]);
  de:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	91 ee       	ldi	r25, 0xE1	; 225
  e6:	a4 e0       	ldi	r26, 0x04	; 4
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	a0 40       	sbci	r26, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x56>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x60>
  f2:	00 00       	nop
  f4:	0f 5f       	subi	r16, 0xFF	; 255
  f6:	1f 4f       	sbci	r17, 0xFF	; 255
	char i,opr;
	unsigned short res;
	while(1)
	{
		/***********************************************************/
			for(i=0;i<2;i++)
  f8:	08 15       	cp	r16, r8
  fa:	19 05       	cpc	r17, r9
  fc:	51 f7       	brne	.-44     	; 0xd2 <main+0x40>
					num1[i]=keypad_checkpress();
				} while (num1[i]==NOT_PRESSED);
				LCD_vsend_char(num1[i]);
				_delay_ms(200);
			}
		    if (num1[1]=='+' || num1[1]=='-' || num1[1]=='*' || num1[1]=='/' )
  fe:	da 80       	ldd	r13, Y+2	; 0x02
 100:	9b e2       	ldi	r25, 0x2B	; 43
 102:	d9 16       	cp	r13, r25
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x78>
 106:	84 01       	movw	r16, r8
 108:	0b c0       	rjmp	.+22     	; 0x120 <main+0x8e>
 10a:	ad e2       	ldi	r26, 0x2D	; 45
 10c:	da 16       	cp	r13, r26
 10e:	d9 f3       	breq	.-10     	; 0x106 <main+0x74>
 110:	ba e2       	ldi	r27, 0x2A	; 42
 112:	db 16       	cp	r13, r27
 114:	c1 f3       	breq	.-16     	; 0x106 <main+0x74>
 116:	ef e2       	ldi	r30, 0x2F	; 47
 118:	de 16       	cp	r13, r30
 11a:	09 f0       	breq	.+2      	; 0x11e <main+0x8c>
 11c:	d8 c0       	rjmp	.+432    	; 0x2ce <main+0x23c>
 11e:	f3 cf       	rjmp	.-26     	; 0x106 <main+0x74>
			    opr=num1[1];
			    for(i=0;i<2;i++)
			    {
				    do
				    {
					    num2[i]=keypad_checkpress();
 120:	0e 94 9e 05 	call	0xb3c	; 0xb3c <keypad_checkpress>
 124:	d8 01       	movw	r26, r16
 126:	8c 93       	st	X, r24
				    } while (num2[i]==NOT_PRESSED);
 128:	8f 3f       	cpi	r24, 0xFF	; 255
 12a:	d1 f3       	breq	.-12     	; 0x120 <main+0x8e>
				    LCD_vsend_char(num2[i]);
 12c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	91 ee       	ldi	r25, 0xE1	; 225
 134:	a4 e0       	ldi	r26, 0x04	; 4
 136:	81 50       	subi	r24, 0x01	; 1
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	a0 40       	sbci	r26, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0xa4>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0xae>
 140:	00 00       	nop
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
				_delay_ms(200);
			}
		    if (num1[1]=='+' || num1[1]=='-' || num1[1]=='*' || num1[1]=='/' )
		    {
			    opr=num1[1];
			    for(i=0;i<2;i++)
 146:	06 15       	cp	r16, r6
 148:	17 05       	cpc	r17, r7
 14a:	51 f7       	brne	.-44     	; 0x120 <main+0x8e>
					    num2[i]=keypad_checkpress();
				    } while (num2[i]==NOT_PRESSED);
				    LCD_vsend_char(num2[i]);
				    _delay_ms(200);
			    }
				if (num2[1]=='=')
 14c:	2c 81       	ldd	r18, Y+4	; 0x04
 14e:	2d 33       	cpi	r18, 0x3D	; 61
 150:	09 f0       	breq	.+2      	; 0x154 <main+0xc2>
 152:	3f c0       	rjmp	.+126    	; 0x1d2 <main+0x140>
				{
					num2[0]-=48;
 154:	6b 81       	ldd	r22, Y+3	; 0x03
 156:	60 53       	subi	r22, 0x30	; 48
 158:	6b 83       	std	Y+3, r22	; 0x03
					num1[0]-=48;
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	80 53       	subi	r24, 0x30	; 48
 15e:	89 83       	std	Y+1, r24	; 0x01
					switch(opr)
 160:	9b e2       	ldi	r25, 0x2B	; 43
 162:	d9 16       	cp	r13, r25
 164:	69 f0       	breq	.+26     	; 0x180 <main+0xee>
 166:	9d 15       	cp	r25, r13
 168:	20 f0       	brcs	.+8      	; 0x172 <main+0xe0>
 16a:	aa e2       	ldi	r26, 0x2A	; 42
 16c:	da 16       	cp	r13, r26
 16e:	d1 f4       	brne	.+52     	; 0x1a4 <main+0x112>
 170:	11 c0       	rjmp	.+34     	; 0x194 <main+0x102>
 172:	bd e2       	ldi	r27, 0x2D	; 45
 174:	db 16       	cp	r13, r27
 176:	49 f0       	breq	.+18     	; 0x18a <main+0xf8>
 178:	ef e2       	ldi	r30, 0x2F	; 47
 17a:	de 16       	cp	r13, r30
 17c:	99 f4       	brne	.+38     	; 0x1a4 <main+0x112>
 17e:	0e c0       	rjmp	.+28     	; 0x19c <main+0x10a>
					{
						case '+':res=num2[0]+num1[0];
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	7c 01       	movw	r14, r24
 184:	e6 0e       	add	r14, r22
 186:	f1 1c       	adc	r15, r1
						break;
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <main+0x112>
						case '-':res=num1[0]-num2[0];
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	7c 01       	movw	r14, r24
 18e:	e6 1a       	sub	r14, r22
 190:	f1 08       	sbc	r15, r1
						break;
 192:	08 c0       	rjmp	.+16     	; 0x1a4 <main+0x112>
						case '*':res=num1[0]*num2[0];
 194:	68 9f       	mul	r22, r24
 196:	70 01       	movw	r14, r0
 198:	11 24       	eor	r1, r1
						break;
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <main+0x112>
						case '/':res=num1[0]/num2[0];
 19c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodqi4>
 1a0:	e8 2e       	mov	r14, r24
 1a2:	ff 24       	eor	r15, r15
						break;
					}
					if (res<10)
 1a4:	fa e0       	ldi	r31, 0x0A	; 10
 1a6:	ef 16       	cp	r14, r31
 1a8:	f1 04       	cpc	r15, r1
 1aa:	28 f4       	brcc	.+10     	; 0x1b6 <main+0x124>
					{
						LCD_vsend_char(res+48);
 1ac:	8e 2d       	mov	r24, r14
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 1b4:	f9 c1       	rjmp	.+1010   	; 0x5a8 <main+0x516>
					}
					else
					{
						LCD_vsend_char(res/10+48);
 1b6:	c7 01       	movw	r24, r14
 1b8:	b1 01       	movw	r22, r2
 1ba:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 1be:	18 2f       	mov	r17, r24
 1c0:	86 2f       	mov	r24, r22
 1c2:	80 5d       	subi	r24, 0xD0	; 208
 1c4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						LCD_vsend_char(res%10+48);
 1c8:	81 2f       	mov	r24, r17
 1ca:	80 5d       	subi	r24, 0xD0	; 208
 1cc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 1d0:	eb c1       	rjmp	.+982    	; 0x5a8 <main+0x516>
					}
				}
	/*********************************************************/
				else
				{
					num1[0]-=48;
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	80 53       	subi	r24, 0x30	; 48
 1d6:	89 83       	std	Y+1, r24	; 0x01
					num2[1]=(num2[0]-48)*10+(num2[1]-48);
 1d8:	20 51       	subi	r18, 0x10	; 16
 1da:	9b 81       	ldd	r25, Y+3	; 0x03
 1dc:	99 0f       	add	r25, r25
 1de:	69 2f       	mov	r22, r25
 1e0:	66 0f       	add	r22, r22
 1e2:	66 0f       	add	r22, r22
 1e4:	69 0f       	add	r22, r25
 1e6:	62 0f       	add	r22, r18
 1e8:	6c 83       	std	Y+4, r22	; 0x04
					switch(opr)
 1ea:	9b e2       	ldi	r25, 0x2B	; 43
 1ec:	d9 16       	cp	r13, r25
 1ee:	69 f0       	breq	.+26     	; 0x20a <main+0x178>
 1f0:	9d 15       	cp	r25, r13
 1f2:	20 f0       	brcs	.+8      	; 0x1fc <main+0x16a>
 1f4:	aa e2       	ldi	r26, 0x2A	; 42
 1f6:	da 16       	cp	r13, r26
 1f8:	d1 f4       	brne	.+52     	; 0x22e <main+0x19c>
 1fa:	11 c0       	rjmp	.+34     	; 0x21e <main+0x18c>
 1fc:	bd e2       	ldi	r27, 0x2D	; 45
 1fe:	db 16       	cp	r13, r27
 200:	49 f0       	breq	.+18     	; 0x214 <main+0x182>
 202:	ef e2       	ldi	r30, 0x2F	; 47
 204:	de 16       	cp	r13, r30
 206:	99 f4       	brne	.+38     	; 0x22e <main+0x19c>
 208:	0e c0       	rjmp	.+28     	; 0x226 <main+0x194>
					{
						case '+':res=num2[1]+num1[0];
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	7c 01       	movw	r14, r24
 20e:	e6 0e       	add	r14, r22
 210:	f1 1c       	adc	r15, r1
						break;
 212:	0d c0       	rjmp	.+26     	; 0x22e <main+0x19c>
						case '-':res=num1[0]-num2[1];
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	7c 01       	movw	r14, r24
 218:	e6 1a       	sub	r14, r22
 21a:	f1 08       	sbc	r15, r1
						break;
 21c:	08 c0       	rjmp	.+16     	; 0x22e <main+0x19c>
						case '*':res=num1[0]*num2[1];
 21e:	68 9f       	mul	r22, r24
 220:	70 01       	movw	r14, r0
 222:	11 24       	eor	r1, r1
						break;
 224:	04 c0       	rjmp	.+8      	; 0x22e <main+0x19c>
						case '/':res=num1[0]/num2[1];
 226:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodqi4>
 22a:	e8 2e       	mov	r14, r24
 22c:	ff 24       	eor	r15, r15
						break;
					}
					do
					{
						opr=keypad_checkpress();
 22e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <keypad_checkpress>
 232:	08 2f       	mov	r16, r24
					} while (opr==NOT_PRESSED);
 234:	8f 3f       	cpi	r24, 0xFF	; 255
 236:	d9 f3       	breq	.-10     	; 0x22e <main+0x19c>
					LCD_vsend_char(opr);
 238:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	91 ee       	ldi	r25, 0xE1	; 225
 240:	a4 e0       	ldi	r26, 0x04	; 4
 242:	81 50       	subi	r24, 0x01	; 1
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	a0 40       	sbci	r26, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x1b0>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x1ba>
 24c:	00 00       	nop
						{
							LCD_vsend_char(res+48);
						}
						else if(res<100)
						{
							LCD_vsend_char(res/10+48);
 24e:	c7 01       	movw	r24, r14
 250:	b1 01       	movw	r22, r2
 252:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 256:	0f 2e       	mov	r0, r31
 258:	f0 e3       	ldi	r31, 0x30	; 48
 25a:	df 2e       	mov	r13, r31
 25c:	f0 2d       	mov	r31, r0
 25e:	d6 0e       	add	r13, r22
							LCD_vsend_char(res%10+48);
 260:	18 2f       	mov	r17, r24
 262:	10 5d       	subi	r17, 0xD0	; 208
						}
						else
						{
							LCD_vsend_char(res/100+48);
 264:	c7 01       	movw	r24, r14
 266:	64 e6       	ldi	r22, 0x64	; 100
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 26e:	0f 2e       	mov	r0, r31
 270:	f0 e3       	ldi	r31, 0x30	; 48
 272:	bf 2e       	mov	r11, r31
 274:	f0 2d       	mov	r31, r0
 276:	b6 0e       	add	r11, r22
							LCD_vsend_char(((res/10)-(res/100)*10)+48);
 278:	66 0f       	add	r22, r22
 27a:	86 2f       	mov	r24, r22
 27c:	88 0f       	add	r24, r24
 27e:	88 0f       	add	r24, r24
 280:	68 0f       	add	r22, r24
 282:	cd 2c       	mov	r12, r13
 284:	c6 1a       	sub	r12, r22
					_delay_ms(200);
					do
					{
						if (res<10)
						{
							LCD_vsend_char(res+48);
 286:	0f 2e       	mov	r0, r31
 288:	f0 e3       	ldi	r31, 0x30	; 48
 28a:	af 2e       	mov	r10, r31
 28c:	f0 2d       	mov	r31, r0
 28e:	ae 0c       	add	r10, r14
					} while (opr==NOT_PRESSED);
					LCD_vsend_char(opr);
					_delay_ms(200);
					do
					{
						if (res<10)
 290:	9a e0       	ldi	r25, 0x0A	; 10
 292:	e9 16       	cp	r14, r25
 294:	f1 04       	cpc	r15, r1
 296:	20 f4       	brcc	.+8      	; 0x2a0 <main+0x20e>
						{
							LCD_vsend_char(res+48);
 298:	8a 2d       	mov	r24, r10
 29a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 29e:	14 c0       	rjmp	.+40     	; 0x2c8 <main+0x236>
						}
						else if(res<100)
 2a0:	a4 e6       	ldi	r26, 0x64	; 100
 2a2:	ea 16       	cp	r14, r26
 2a4:	f1 04       	cpc	r15, r1
 2a6:	38 f4       	brcc	.+14     	; 0x2b6 <main+0x224>
						{
							LCD_vsend_char(res/10+48);
 2a8:	8d 2d       	mov	r24, r13
 2aa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
							LCD_vsend_char(res%10+48);
 2ae:	81 2f       	mov	r24, r17
 2b0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <main+0x236>
						}
						else
						{
							LCD_vsend_char(res/100+48);
 2b6:	8b 2d       	mov	r24, r11
 2b8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
							LCD_vsend_char(((res/10)-(res/100)*10)+48);
 2bc:	8c 2d       	mov	r24, r12
 2be:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
							LCD_vsend_char(res%10+48);
 2c2:	81 2f       	mov	r24, r17
 2c4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						}
					} while (opr!='=');
 2c8:	0d 33       	cpi	r16, 0x3D	; 61
 2ca:	11 f7       	brne	.-60     	; 0x290 <main+0x1fe>
 2cc:	6d c1       	rjmp	.+730    	; 0x5a8 <main+0x516>
				}
	/*********************************************************/
				}	
	else
	{
		num1[1]=(num1[0]-48)*10+(num1[1]-48);
 2ce:	8d 2d       	mov	r24, r13
 2d0:	80 51       	subi	r24, 0x10	; 16
 2d2:	99 81       	ldd	r25, Y+1	; 0x01
 2d4:	99 0f       	add	r25, r25
 2d6:	c9 2e       	mov	r12, r25
 2d8:	cc 0c       	add	r12, r12
 2da:	cc 0c       	add	r12, r12
 2dc:	9c 0d       	add	r25, r12
 2de:	c8 2e       	mov	r12, r24
 2e0:	c9 0e       	add	r12, r25
 2e2:	ca 82       	std	Y+2, r12	; 0x02
		do
		{
			opr=keypad_checkpress();
 2e4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <keypad_checkpress>
 2e8:	d8 2e       	mov	r13, r24
		} while (opr==NOT_PRESSED);
 2ea:	bf ef       	ldi	r27, 0xFF	; 255
 2ec:	8b 17       	cp	r24, r27
 2ee:	d1 f3       	breq	.-12     	; 0x2e4 <main+0x252>
		LCD_vsend_char(opr);
 2f0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	91 ee       	ldi	r25, 0xE1	; 225
 2f8:	a4 e0       	ldi	r26, 0x04	; 4
 2fa:	81 50       	subi	r24, 0x01	; 1
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	a0 40       	sbci	r26, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x268>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x272>
 304:	00 00       	nop
 306:	84 01       	movw	r16, r8
		
		for (i=0;i<2;i++)
		{
			do
			{
				num2[i]=keypad_checkpress();
 308:	0e 94 9e 05 	call	0xb3c	; 0xb3c <keypad_checkpress>
 30c:	d8 01       	movw	r26, r16
 30e:	8c 93       	st	X, r24
			} while (num2[i]==NOT_PRESSED);
 310:	8f 3f       	cpi	r24, 0xFF	; 255
 312:	d1 f3       	breq	.-12     	; 0x308 <main+0x276>
			LCD_vsend_char(num2[i]);
 314:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	91 ee       	ldi	r25, 0xE1	; 225
 31c:	a4 e0       	ldi	r26, 0x04	; 4
 31e:	81 50       	subi	r24, 0x01	; 1
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	a0 40       	sbci	r26, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x28c>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x296>
 328:	00 00       	nop
 32a:	0f 5f       	subi	r16, 0xFF	; 255
 32c:	1f 4f       	sbci	r17, 0xFF	; 255
			opr=keypad_checkpress();
		} while (opr==NOT_PRESSED);
		LCD_vsend_char(opr);
		_delay_ms(200);
		
		for (i=0;i<2;i++)
 32e:	06 15       	cp	r16, r6
 330:	17 05       	cpc	r17, r7
 332:	51 f7       	brne	.-44     	; 0x308 <main+0x276>
				num2[i]=keypad_checkpress();
			} while (num2[i]==NOT_PRESSED);
			LCD_vsend_char(num2[i]);
			_delay_ms(200);
		}	
		if (num2[1]=='=')
 334:	9c 81       	ldd	r25, Y+4	; 0x04
 336:	9d 33       	cpi	r25, 0x3D	; 61
 338:	09 f0       	breq	.+2      	; 0x33c <main+0x2aa>
 33a:	95 c0       	rjmp	.+298    	; 0x466 <main+0x3d4>
		{
			num2[0]-=48;
 33c:	6b 81       	ldd	r22, Y+3	; 0x03
 33e:	60 53       	subi	r22, 0x30	; 48
 340:	6b 83       	std	Y+3, r22	; 0x03
			switch(opr)
 342:	9b e2       	ldi	r25, 0x2B	; 43
 344:	d9 16       	cp	r13, r25
 346:	69 f0       	breq	.+26     	; 0x362 <main+0x2d0>
 348:	9d 15       	cp	r25, r13
 34a:	20 f0       	brcs	.+8      	; 0x354 <main+0x2c2>
 34c:	aa e2       	ldi	r26, 0x2A	; 42
 34e:	da 16       	cp	r13, r26
 350:	f1 f4       	brne	.+60     	; 0x38e <main+0x2fc>
 352:	13 c0       	rjmp	.+38     	; 0x37a <main+0x2e8>
 354:	bd e2       	ldi	r27, 0x2D	; 45
 356:	db 16       	cp	r13, r27
 358:	51 f0       	breq	.+20     	; 0x36e <main+0x2dc>
 35a:	ef e2       	ldi	r30, 0x2F	; 47
 35c:	de 16       	cp	r13, r30
 35e:	b9 f4       	brne	.+46     	; 0x38e <main+0x2fc>
 360:	11 c0       	rjmp	.+34     	; 0x384 <main+0x2f2>
			{
				case '+':res=num2[0]+num1[1];
 362:	8c 2d       	mov	r24, r12
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	7c 01       	movw	r14, r24
 368:	e6 0e       	add	r14, r22
 36a:	f1 1c       	adc	r15, r1
				break;
 36c:	10 c0       	rjmp	.+32     	; 0x38e <main+0x2fc>
				case '-':res=num1[1]-num2[0];
 36e:	8c 2d       	mov	r24, r12
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	7c 01       	movw	r14, r24
 374:	e6 1a       	sub	r14, r22
 376:	f1 08       	sbc	r15, r1
				break;
 378:	0a c0       	rjmp	.+20     	; 0x38e <main+0x2fc>
				case '*':res=num1[1]*num2[0];
 37a:	fc 2d       	mov	r31, r12
 37c:	6f 9f       	mul	r22, r31
 37e:	70 01       	movw	r14, r0
 380:	11 24       	eor	r1, r1
				break;
 382:	05 c0       	rjmp	.+10     	; 0x38e <main+0x2fc>
				case '/':res=num1[1]/num2[0];
 384:	8c 2d       	mov	r24, r12
 386:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodqi4>
 38a:	e8 2e       	mov	r14, r24
 38c:	ff 24       	eor	r15, r15
				break;
			}
			if (res<10)
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	e8 16       	cp	r14, r24
 392:	f1 04       	cpc	r15, r1
 394:	28 f4       	brcc	.+10     	; 0x3a0 <main+0x30e>
			{
				LCD_vsend_char(res+48);
 396:	8e 2d       	mov	r24, r14
 398:	80 5d       	subi	r24, 0xD0	; 208
 39a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 39e:	04 c1       	rjmp	.+520    	; 0x5a8 <main+0x516>
			}
			else if(res<100)
 3a0:	94 e6       	ldi	r25, 0x64	; 100
 3a2:	e9 16       	cp	r14, r25
 3a4:	f1 04       	cpc	r15, r1
 3a6:	70 f4       	brcc	.+28     	; 0x3c4 <main+0x332>
			{
				LCD_vsend_char(res/10+48);
 3a8:	c7 01       	movw	r24, r14
 3aa:	b1 01       	movw	r22, r2
 3ac:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 3b0:	18 2f       	mov	r17, r24
 3b2:	86 2f       	mov	r24, r22
 3b4:	80 5d       	subi	r24, 0xD0	; 208
 3b6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
				LCD_vsend_char(res%10+48);
 3ba:	81 2f       	mov	r24, r17
 3bc:	80 5d       	subi	r24, 0xD0	; 208
 3be:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 3c2:	f2 c0       	rjmp	.+484    	; 0x5a8 <main+0x516>
			}
			else if(res<1000)
 3c4:	a8 ee       	ldi	r26, 0xE8	; 232
 3c6:	ea 16       	cp	r14, r26
 3c8:	a3 e0       	ldi	r26, 0x03	; 3
 3ca:	fa 06       	cpc	r15, r26
 3cc:	f0 f4       	brcc	.+60     	; 0x40a <main+0x378>
			{
				LCD_vsend_char(res/100+48);
 3ce:	c7 01       	movw	r24, r14
 3d0:	64 e6       	ldi	r22, 0x64	; 100
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 3d8:	16 2f       	mov	r17, r22
 3da:	86 2f       	mov	r24, r22
 3dc:	80 5d       	subi	r24, 0xD0	; 208
 3de:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
				LCD_vsend_char(((res/10)-(res/100)*10)+48);
 3e2:	c7 01       	movw	r24, r14
 3e4:	b1 01       	movw	r22, r2
 3e6:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 3ea:	08 2f       	mov	r16, r24
 3ec:	86 2f       	mov	r24, r22
 3ee:	80 5d       	subi	r24, 0xD0	; 208
 3f0:	11 0f       	add	r17, r17
 3f2:	91 2f       	mov	r25, r17
 3f4:	99 0f       	add	r25, r25
 3f6:	99 0f       	add	r25, r25
 3f8:	19 0f       	add	r17, r25
 3fa:	81 1b       	sub	r24, r17
 3fc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
				LCD_vsend_char(res%10+48);
 400:	80 2f       	mov	r24, r16
 402:	80 5d       	subi	r24, 0xD0	; 208
 404:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 408:	cf c0       	rjmp	.+414    	; 0x5a8 <main+0x516>
			}
			else
			{
				LCD_vsend_char(res/1000+48);
 40a:	c7 01       	movw	r24, r14
 40c:	68 ee       	ldi	r22, 0xE8	; 232
 40e:	73 e0       	ldi	r23, 0x03	; 3
 410:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 414:	16 2f       	mov	r17, r22
 416:	86 2f       	mov	r24, r22
 418:	80 5d       	subi	r24, 0xD0	; 208
 41a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
				LCD_vsend_char((res/100)-((res/1000)*10)+48);
 41e:	c7 01       	movw	r24, r14
 420:	64 e6       	ldi	r22, 0x64	; 100
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 428:	06 2f       	mov	r16, r22
 42a:	86 2f       	mov	r24, r22
 42c:	80 5d       	subi	r24, 0xD0	; 208
 42e:	11 0f       	add	r17, r17
 430:	91 2f       	mov	r25, r17
 432:	99 0f       	add	r25, r25
 434:	99 0f       	add	r25, r25
 436:	19 0f       	add	r17, r25
 438:	81 1b       	sub	r24, r17
 43a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
				LCD_vsend_char(((res/10)-(res/100)*10)+48);
 43e:	c7 01       	movw	r24, r14
 440:	b1 01       	movw	r22, r2
 442:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 446:	18 2f       	mov	r17, r24
 448:	86 2f       	mov	r24, r22
 44a:	80 5d       	subi	r24, 0xD0	; 208
 44c:	00 0f       	add	r16, r16
 44e:	90 2f       	mov	r25, r16
 450:	99 0f       	add	r25, r25
 452:	99 0f       	add	r25, r25
 454:	09 0f       	add	r16, r25
 456:	80 1b       	sub	r24, r16
 458:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
				LCD_vsend_char(res%10+48);
 45c:	81 2f       	mov	r24, r17
 45e:	80 5d       	subi	r24, 0xD0	; 208
 460:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 464:	a1 c0       	rjmp	.+322    	; 0x5a8 <main+0x516>
			}
	/***********************************************************/
			else
			{
				
				num2[1]=(num2[0]-48)*10+(num2[1]-48);
 466:	90 51       	subi	r25, 0x10	; 16
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	88 0f       	add	r24, r24
 46c:	68 2f       	mov	r22, r24
 46e:	66 0f       	add	r22, r22
 470:	66 0f       	add	r22, r22
 472:	68 0f       	add	r22, r24
 474:	69 0f       	add	r22, r25
 476:	6c 83       	std	Y+4, r22	; 0x04
				switch(opr)
 478:	bb e2       	ldi	r27, 0x2B	; 43
 47a:	db 16       	cp	r13, r27
 47c:	69 f0       	breq	.+26     	; 0x498 <main+0x406>
 47e:	bd 15       	cp	r27, r13
 480:	20 f0       	brcs	.+8      	; 0x48a <main+0x3f8>
 482:	ea e2       	ldi	r30, 0x2A	; 42
 484:	de 16       	cp	r13, r30
 486:	f1 f4       	brne	.+60     	; 0x4c4 <main+0x432>
 488:	13 c0       	rjmp	.+38     	; 0x4b0 <main+0x41e>
 48a:	fd e2       	ldi	r31, 0x2D	; 45
 48c:	df 16       	cp	r13, r31
 48e:	51 f0       	breq	.+20     	; 0x4a4 <main+0x412>
 490:	8f e2       	ldi	r24, 0x2F	; 47
 492:	d8 16       	cp	r13, r24
 494:	b9 f4       	brne	.+46     	; 0x4c4 <main+0x432>
 496:	11 c0       	rjmp	.+34     	; 0x4ba <main+0x428>
				{
					case '+':res=num2[1]+num1[1];
 498:	8c 2d       	mov	r24, r12
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	7c 01       	movw	r14, r24
 49e:	e6 0e       	add	r14, r22
 4a0:	f1 1c       	adc	r15, r1
					break;
 4a2:	10 c0       	rjmp	.+32     	; 0x4c4 <main+0x432>
					case '-':res=num1[1]-num2[1];
 4a4:	8c 2d       	mov	r24, r12
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	7c 01       	movw	r14, r24
 4aa:	e6 1a       	sub	r14, r22
 4ac:	f1 08       	sbc	r15, r1
					break;
 4ae:	0a c0       	rjmp	.+20     	; 0x4c4 <main+0x432>
					case '*':res=num1[1]*num2[1];
 4b0:	9c 2d       	mov	r25, r12
 4b2:	69 9f       	mul	r22, r25
 4b4:	70 01       	movw	r14, r0
 4b6:	11 24       	eor	r1, r1
					break;
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <main+0x432>
					case '/':res=num1[1]/num2[1];
 4ba:	8c 2d       	mov	r24, r12
 4bc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodqi4>
 4c0:	e8 2e       	mov	r14, r24
 4c2:	ff 24       	eor	r15, r15
					break;
				}
				do
				{
					opr=keypad_checkpress();
 4c4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <keypad_checkpress>
 4c8:	08 2f       	mov	r16, r24
				} while (opr==NOT_PRESSED);
 4ca:	8f 3f       	cpi	r24, 0xFF	; 255
 4cc:	d9 f3       	breq	.-10     	; 0x4c4 <main+0x432>
				LCD_vsend_char(opr);
 4ce:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	91 ee       	ldi	r25, 0xE1	; 225
 4d6:	a4 e0       	ldi	r26, 0x04	; 4
 4d8:	81 50       	subi	r24, 0x01	; 1
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	a0 40       	sbci	r26, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <main+0x446>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <main+0x450>
 4e2:	00 00       	nop
					{
						LCD_vsend_char(res+48);
					}
					else if(res<100)
					{
						LCD_vsend_char(res/10+48);
 4e4:	c7 01       	movw	r24, r14
 4e6:	b1 01       	movw	r22, r2
 4e8:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 4ec:	0f 2e       	mov	r0, r31
 4ee:	f0 e3       	ldi	r31, 0x30	; 48
 4f0:	af 2e       	mov	r10, r31
 4f2:	f0 2d       	mov	r31, r0
 4f4:	a6 0e       	add	r10, r22
						LCD_vsend_char(res%10+48);
 4f6:	18 2f       	mov	r17, r24
 4f8:	10 5d       	subi	r17, 0xD0	; 208
					}
					else if(res<1000)
					{
						LCD_vsend_char(res/100+48);
 4fa:	c7 01       	movw	r24, r14
 4fc:	64 e6       	ldi	r22, 0x64	; 100
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 504:	0f 2e       	mov	r0, r31
 506:	f0 e3       	ldi	r31, 0x30	; 48
 508:	cf 2e       	mov	r12, r31
 50a:	f0 2d       	mov	r31, r0
 50c:	c6 0e       	add	r12, r22
						LCD_vsend_char(((res/10)-(res/100)*10)+48);
 50e:	66 0f       	add	r22, r22
 510:	86 2f       	mov	r24, r22
 512:	88 0f       	add	r24, r24
 514:	88 0f       	add	r24, r24
 516:	68 0f       	add	r22, r24
 518:	da 2c       	mov	r13, r10
 51a:	d6 1a       	sub	r13, r22
						LCD_vsend_char(res%10+48);
					}
					else
					{
						LCD_vsend_char(res/1000+48);
 51c:	c7 01       	movw	r24, r14
 51e:	68 ee       	ldi	r22, 0xE8	; 232
 520:	73 e0       	ldi	r23, 0x03	; 3
 522:	0e 94 d1 06 	call	0xda2	; 0xda2 <__udivmodhi4>
 526:	0f 2e       	mov	r0, r31
 528:	f0 e3       	ldi	r31, 0x30	; 48
 52a:	4f 2e       	mov	r4, r31
 52c:	f0 2d       	mov	r31, r0
 52e:	46 0e       	add	r4, r22
						LCD_vsend_char((res/100)-((res/1000)*10)+48);
 530:	66 0f       	add	r22, r22
 532:	86 2f       	mov	r24, r22
 534:	88 0f       	add	r24, r24
 536:	88 0f       	add	r24, r24
 538:	68 0f       	add	r22, r24
 53a:	bc 2c       	mov	r11, r12
 53c:	b6 1a       	sub	r11, r22
				_delay_ms(200);
				do
				{
					if (res<10)
					{
						LCD_vsend_char(res+48);
 53e:	0f 2e       	mov	r0, r31
 540:	f0 e3       	ldi	r31, 0x30	; 48
 542:	5f 2e       	mov	r5, r31
 544:	f0 2d       	mov	r31, r0
 546:	5e 0c       	add	r5, r14
				} while (opr==NOT_PRESSED);
				LCD_vsend_char(opr);
				_delay_ms(200);
				do
				{
					if (res<10)
 548:	9a e0       	ldi	r25, 0x0A	; 10
 54a:	e9 16       	cp	r14, r25
 54c:	f1 04       	cpc	r15, r1
 54e:	20 f4       	brcc	.+8      	; 0x558 <main+0x4c6>
					{
						LCD_vsend_char(res+48);
 550:	85 2d       	mov	r24, r5
 552:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 556:	26 c0       	rjmp	.+76     	; 0x5a4 <main+0x512>
					}
					else if(res<100)
 558:	a4 e6       	ldi	r26, 0x64	; 100
 55a:	ea 16       	cp	r14, r26
 55c:	f1 04       	cpc	r15, r1
 55e:	38 f4       	brcc	.+14     	; 0x56e <main+0x4dc>
					{
						LCD_vsend_char(res/10+48);
 560:	8a 2d       	mov	r24, r10
 562:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						LCD_vsend_char(res%10+48);
 566:	81 2f       	mov	r24, r17
 568:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <main+0x512>
					}
					else if(res<1000)
 56e:	b8 ee       	ldi	r27, 0xE8	; 232
 570:	eb 16       	cp	r14, r27
 572:	b3 e0       	ldi	r27, 0x03	; 3
 574:	fb 06       	cpc	r15, r27
 576:	50 f4       	brcc	.+20     	; 0x58c <main+0x4fa>
					{
						LCD_vsend_char(res/100+48);
 578:	8c 2d       	mov	r24, r12
 57a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						LCD_vsend_char(((res/10)-(res/100)*10)+48);
 57e:	8d 2d       	mov	r24, r13
 580:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						LCD_vsend_char(res%10+48);
 584:	81 2f       	mov	r24, r17
 586:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
 58a:	0c c0       	rjmp	.+24     	; 0x5a4 <main+0x512>
					}
					else
					{
						LCD_vsend_char(res/1000+48);
 58c:	84 2d       	mov	r24, r4
 58e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						LCD_vsend_char((res/100)-((res/1000)*10)+48);
 592:	8b 2d       	mov	r24, r11
 594:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						LCD_vsend_char(((res/10)-(res/100)*10)+48);
 598:	8d 2d       	mov	r24, r13
 59a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
						LCD_vsend_char(res%10+48);
 59e:	81 2f       	mov	r24, r17
 5a0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
					}
				} while (opr!='=');
 5a4:	0d 33       	cpi	r16, 0x3D	; 61
 5a6:	81 f6       	brne	.-96     	; 0x548 <main+0x4b6>
			}
		}	
		
		do
		{
			opr=keypad_checkpress();
 5a8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <keypad_checkpress>
			
		} while (opr == NOT_PRESSED);
 5ac:	8f 3f       	cpi	r24, 0xFF	; 255
 5ae:	e1 f3       	breq	.-8      	; 0x5a8 <main+0x516>
		if (opr=='A')
 5b0:	81 34       	cpi	r24, 0x41	; 65
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <main+0x526>
		{
			LCD_clearscreen();
 5b4:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_clearscreen>
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	91 ee       	ldi	r25, 0xE1	; 225
 5bc:	a4 e0       	ldi	r26, 0x04	; 4
 5be:	81 50       	subi	r24, 0x01	; 1
 5c0:	90 40       	sbci	r25, 0x00	; 0
 5c2:	a0 40       	sbci	r26, 0x00	; 0
 5c4:	e1 f7       	brne	.-8      	; 0x5be <main+0x52c>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <main+0x536>
 5c8:	00 00       	nop
 5ca:	80 cd       	rjmp	.-1280   	; 0xcc <main+0x3a>

000005cc <DIO_SETPIN_DIR>:
 */ 
#include <avr/io.h>
#include "STD_MACROS.h"
void DIO_SETPIN_DIR(char port,char pin , char dir)
{
	switch (port)
 5cc:	84 34       	cpi	r24, 0x44	; 68
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <DIO_SETPIN_DIR+0x6>
 5d0:	71 c0       	rjmp	.+226    	; 0x6b4 <DIO_SETPIN_DIR+0xe8>
 5d2:	85 34       	cpi	r24, 0x45	; 69
 5d4:	48 f4       	brcc	.+18     	; 0x5e8 <DIO_SETPIN_DIR+0x1c>
 5d6:	82 34       	cpi	r24, 0x42	; 66
 5d8:	99 f1       	breq	.+102    	; 0x640 <DIO_SETPIN_DIR+0x74>
 5da:	83 34       	cpi	r24, 0x43	; 67
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <DIO_SETPIN_DIR+0x14>
 5de:	4d c0       	rjmp	.+154    	; 0x67a <DIO_SETPIN_DIR+0xae>
 5e0:	81 34       	cpi	r24, 0x41	; 65
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <DIO_SETPIN_DIR+0x1a>
 5e4:	83 c0       	rjmp	.+262    	; 0x6ec <DIO_SETPIN_DIR+0x120>
 5e6:	0f c0       	rjmp	.+30     	; 0x606 <DIO_SETPIN_DIR+0x3a>
 5e8:	82 36       	cpi	r24, 0x62	; 98
 5ea:	51 f1       	breq	.+84     	; 0x640 <DIO_SETPIN_DIR+0x74>
 5ec:	83 36       	cpi	r24, 0x63	; 99
 5ee:	20 f4       	brcc	.+8      	; 0x5f8 <DIO_SETPIN_DIR+0x2c>
 5f0:	81 36       	cpi	r24, 0x61	; 97
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <DIO_SETPIN_DIR+0x2a>
 5f4:	7b c0       	rjmp	.+246    	; 0x6ec <DIO_SETPIN_DIR+0x120>
 5f6:	07 c0       	rjmp	.+14     	; 0x606 <DIO_SETPIN_DIR+0x3a>
 5f8:	83 36       	cpi	r24, 0x63	; 99
 5fa:	09 f4       	brne	.+2      	; 0x5fe <DIO_SETPIN_DIR+0x32>
 5fc:	3e c0       	rjmp	.+124    	; 0x67a <DIO_SETPIN_DIR+0xae>
 5fe:	84 36       	cpi	r24, 0x64	; 100
 600:	09 f0       	breq	.+2      	; 0x604 <DIO_SETPIN_DIR+0x38>
 602:	74 c0       	rjmp	.+232    	; 0x6ec <DIO_SETPIN_DIR+0x120>
 604:	57 c0       	rjmp	.+174    	; 0x6b4 <DIO_SETPIN_DIR+0xe8>
{	
	case 'A':
	case 'a':
	if (dir==1)
 606:	41 30       	cpi	r20, 0x01	; 1
 608:	69 f4       	brne	.+26     	; 0x624 <DIO_SETPIN_DIR+0x58>
	{
		SET_BIT(DDRA,pin);
 60a:	2a b3       	in	r18, 0x1a	; 26
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	ac 01       	movw	r20, r24
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_SETPIN_DIR+0x4c>
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_SETPIN_DIR+0x48>
 61c:	ba 01       	movw	r22, r20
 61e:	62 2b       	or	r22, r18
 620:	6a bb       	out	0x1a, r22	; 26
 622:	08 95       	ret
	}
	else 
	{
		CLR_BIT(DDRA,pin);
 624:	2a b3       	in	r18, 0x1a	; 26
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	ac 01       	movw	r20, r24
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_SETPIN_DIR+0x66>
 62e:	44 0f       	add	r20, r20
 630:	55 1f       	adc	r21, r21
 632:	6a 95       	dec	r22
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_SETPIN_DIR+0x62>
 636:	ba 01       	movw	r22, r20
 638:	60 95       	com	r22
 63a:	62 23       	and	r22, r18
 63c:	6a bb       	out	0x1a, r22	; 26
 63e:	08 95       	ret
	}
	break;
	case 'B':
	case 'b':
	if (dir==1)
 640:	41 30       	cpi	r20, 0x01	; 1
 642:	69 f4       	brne	.+26     	; 0x65e <DIO_SETPIN_DIR+0x92>
	{
		SET_BIT(DDRB,pin);
 644:	27 b3       	in	r18, 0x17	; 23
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	ac 01       	movw	r20, r24
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_SETPIN_DIR+0x86>
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	6a 95       	dec	r22
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_SETPIN_DIR+0x82>
 656:	ba 01       	movw	r22, r20
 658:	62 2b       	or	r22, r18
 65a:	67 bb       	out	0x17, r22	; 23
 65c:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRB,pin);
 65e:	27 b3       	in	r18, 0x17	; 23
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	ac 01       	movw	r20, r24
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_SETPIN_DIR+0xa0>
 668:	44 0f       	add	r20, r20
 66a:	55 1f       	adc	r21, r21
 66c:	6a 95       	dec	r22
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_SETPIN_DIR+0x9c>
 670:	ba 01       	movw	r22, r20
 672:	60 95       	com	r22
 674:	62 23       	and	r22, r18
 676:	67 bb       	out	0x17, r22	; 23
 678:	08 95       	ret
	}
	break;
	case 'C':
	case 'c':
	if (dir==1)
 67a:	41 30       	cpi	r20, 0x01	; 1
 67c:	69 f4       	brne	.+26     	; 0x698 <DIO_SETPIN_DIR+0xcc>
	{
		SET_BIT(DDRC,pin);
 67e:	24 b3       	in	r18, 0x14	; 20
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	ac 01       	movw	r20, r24
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_SETPIN_DIR+0xc0>
 688:	44 0f       	add	r20, r20
 68a:	55 1f       	adc	r21, r21
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_SETPIN_DIR+0xbc>
 690:	ba 01       	movw	r22, r20
 692:	62 2b       	or	r22, r18
 694:	64 bb       	out	0x14, r22	; 20
 696:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRC,pin);
 698:	24 b3       	in	r18, 0x14	; 20
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	ac 01       	movw	r20, r24
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_SETPIN_DIR+0xda>
 6a2:	44 0f       	add	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_SETPIN_DIR+0xd6>
 6aa:	ba 01       	movw	r22, r20
 6ac:	60 95       	com	r22
 6ae:	62 23       	and	r22, r18
 6b0:	64 bb       	out	0x14, r22	; 20
 6b2:	08 95       	ret
	}
	break;
	case 'D':
	case 'd':
	if (dir==1)
 6b4:	41 30       	cpi	r20, 0x01	; 1
 6b6:	69 f4       	brne	.+26     	; 0x6d2 <DIO_SETPIN_DIR+0x106>
	{
		SET_BIT(DDRD,pin);
 6b8:	21 b3       	in	r18, 0x11	; 17
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	ac 01       	movw	r20, r24
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_SETPIN_DIR+0xfa>
 6c2:	44 0f       	add	r20, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_SETPIN_DIR+0xf6>
 6ca:	ba 01       	movw	r22, r20
 6cc:	62 2b       	or	r22, r18
 6ce:	61 bb       	out	0x11, r22	; 17
 6d0:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRD,pin);
 6d2:	21 b3       	in	r18, 0x11	; 17
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	ac 01       	movw	r20, r24
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_SETPIN_DIR+0x114>
 6dc:	44 0f       	add	r20, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_SETPIN_DIR+0x110>
 6e4:	ba 01       	movw	r22, r20
 6e6:	60 95       	com	r22
 6e8:	62 23       	and	r22, r18
 6ea:	61 bb       	out	0x11, r22	; 17
 6ec:	08 95       	ret

000006ee <DIO_WRITE>:
	default:break;
}	
}
void DIO_WRITE(char port,char pin , char val)
{
	switch (port)
 6ee:	84 34       	cpi	r24, 0x44	; 68
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <DIO_WRITE+0x6>
 6f2:	71 c0       	rjmp	.+226    	; 0x7d6 <DIO_WRITE+0xe8>
 6f4:	85 34       	cpi	r24, 0x45	; 69
 6f6:	48 f4       	brcc	.+18     	; 0x70a <DIO_WRITE+0x1c>
 6f8:	82 34       	cpi	r24, 0x42	; 66
 6fa:	99 f1       	breq	.+102    	; 0x762 <DIO_WRITE+0x74>
 6fc:	83 34       	cpi	r24, 0x43	; 67
 6fe:	08 f0       	brcs	.+2      	; 0x702 <DIO_WRITE+0x14>
 700:	4d c0       	rjmp	.+154    	; 0x79c <DIO_WRITE+0xae>
 702:	81 34       	cpi	r24, 0x41	; 65
 704:	09 f0       	breq	.+2      	; 0x708 <DIO_WRITE+0x1a>
 706:	83 c0       	rjmp	.+262    	; 0x80e <DIO_WRITE+0x120>
 708:	0f c0       	rjmp	.+30     	; 0x728 <DIO_WRITE+0x3a>
 70a:	82 36       	cpi	r24, 0x62	; 98
 70c:	51 f1       	breq	.+84     	; 0x762 <DIO_WRITE+0x74>
 70e:	83 36       	cpi	r24, 0x63	; 99
 710:	20 f4       	brcc	.+8      	; 0x71a <DIO_WRITE+0x2c>
 712:	81 36       	cpi	r24, 0x61	; 97
 714:	09 f0       	breq	.+2      	; 0x718 <DIO_WRITE+0x2a>
 716:	7b c0       	rjmp	.+246    	; 0x80e <DIO_WRITE+0x120>
 718:	07 c0       	rjmp	.+14     	; 0x728 <DIO_WRITE+0x3a>
 71a:	83 36       	cpi	r24, 0x63	; 99
 71c:	09 f4       	brne	.+2      	; 0x720 <DIO_WRITE+0x32>
 71e:	3e c0       	rjmp	.+124    	; 0x79c <DIO_WRITE+0xae>
 720:	84 36       	cpi	r24, 0x64	; 100
 722:	09 f0       	breq	.+2      	; 0x726 <DIO_WRITE+0x38>
 724:	74 c0       	rjmp	.+232    	; 0x80e <DIO_WRITE+0x120>
 726:	57 c0       	rjmp	.+174    	; 0x7d6 <DIO_WRITE+0xe8>
	{
	case 'A':
	case 'a':
	if (val==1)
 728:	41 30       	cpi	r20, 0x01	; 1
 72a:	69 f4       	brne	.+26     	; 0x746 <DIO_WRITE+0x58>
	{
		SET_BIT(PORTA,pin);
 72c:	2b b3       	in	r18, 0x1b	; 27
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	ac 01       	movw	r20, r24
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_WRITE+0x4c>
 736:	44 0f       	add	r20, r20
 738:	55 1f       	adc	r21, r21
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_WRITE+0x48>
 73e:	ba 01       	movw	r22, r20
 740:	62 2b       	or	r22, r18
 742:	6b bb       	out	0x1b, r22	; 27
 744:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTA,pin);
 746:	2b b3       	in	r18, 0x1b	; 27
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	ac 01       	movw	r20, r24
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_WRITE+0x66>
 750:	44 0f       	add	r20, r20
 752:	55 1f       	adc	r21, r21
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_WRITE+0x62>
 758:	ba 01       	movw	r22, r20
 75a:	60 95       	com	r22
 75c:	62 23       	and	r22, r18
 75e:	6b bb       	out	0x1b, r22	; 27
 760:	08 95       	ret
	}
	break;
	case 'B':
	case 'b':
	if (val==1)
 762:	41 30       	cpi	r20, 0x01	; 1
 764:	69 f4       	brne	.+26     	; 0x780 <DIO_WRITE+0x92>
	{
		SET_BIT(PORTB,pin);
 766:	28 b3       	in	r18, 0x18	; 24
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	ac 01       	movw	r20, r24
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_WRITE+0x86>
 770:	44 0f       	add	r20, r20
 772:	55 1f       	adc	r21, r21
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_WRITE+0x82>
 778:	ba 01       	movw	r22, r20
 77a:	62 2b       	or	r22, r18
 77c:	68 bb       	out	0x18, r22	; 24
 77e:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTB,pin);
 780:	28 b3       	in	r18, 0x18	; 24
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	ac 01       	movw	r20, r24
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_WRITE+0xa0>
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	6a 95       	dec	r22
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_WRITE+0x9c>
 792:	ba 01       	movw	r22, r20
 794:	60 95       	com	r22
 796:	62 23       	and	r22, r18
 798:	68 bb       	out	0x18, r22	; 24
 79a:	08 95       	ret
	}
	break;
	case 'C':
	case 'c':
	if (val==1)
 79c:	41 30       	cpi	r20, 0x01	; 1
 79e:	69 f4       	brne	.+26     	; 0x7ba <DIO_WRITE+0xcc>
	{
		SET_BIT(PORTC,pin);
 7a0:	25 b3       	in	r18, 0x15	; 21
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	ac 01       	movw	r20, r24
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_WRITE+0xc0>
 7aa:	44 0f       	add	r20, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	6a 95       	dec	r22
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_WRITE+0xbc>
 7b2:	ba 01       	movw	r22, r20
 7b4:	62 2b       	or	r22, r18
 7b6:	65 bb       	out	0x15, r22	; 21
 7b8:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTC,pin);
 7ba:	25 b3       	in	r18, 0x15	; 21
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	ac 01       	movw	r20, r24
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_WRITE+0xda>
 7c4:	44 0f       	add	r20, r20
 7c6:	55 1f       	adc	r21, r21
 7c8:	6a 95       	dec	r22
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_WRITE+0xd6>
 7cc:	ba 01       	movw	r22, r20
 7ce:	60 95       	com	r22
 7d0:	62 23       	and	r22, r18
 7d2:	65 bb       	out	0x15, r22	; 21
 7d4:	08 95       	ret
	}
	break;
	case 'D':
	case 'd':
	if (val==1)
 7d6:	41 30       	cpi	r20, 0x01	; 1
 7d8:	69 f4       	brne	.+26     	; 0x7f4 <DIO_WRITE+0x106>
	{
		SET_BIT(PORTD,pin);
 7da:	22 b3       	in	r18, 0x12	; 18
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	ac 01       	movw	r20, r24
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_WRITE+0xfa>
 7e4:	44 0f       	add	r20, r20
 7e6:	55 1f       	adc	r21, r21
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_WRITE+0xf6>
 7ec:	ba 01       	movw	r22, r20
 7ee:	62 2b       	or	r22, r18
 7f0:	62 bb       	out	0x12, r22	; 18
 7f2:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTD,pin);
 7f4:	22 b3       	in	r18, 0x12	; 18
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	ac 01       	movw	r20, r24
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_WRITE+0x114>
 7fe:	44 0f       	add	r20, r20
 800:	55 1f       	adc	r21, r21
 802:	6a 95       	dec	r22
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_WRITE+0x110>
 806:	ba 01       	movw	r22, r20
 808:	60 95       	com	r22
 80a:	62 23       	and	r22, r18
 80c:	62 bb       	out	0x12, r22	; 18
 80e:	08 95       	ret

00000810 <DIO_TOGGLE_BIT>:
	default:break;
	}	
}
void DIO_TOGGLE_BIT(char port , char pin )
{
	switch(port)
 810:	84 34       	cpi	r24, 0x44	; 68
 812:	09 f4       	brne	.+2      	; 0x816 <DIO_TOGGLE_BIT+0x6>
 814:	3d c0       	rjmp	.+122    	; 0x890 <__stack+0x31>
 816:	85 34       	cpi	r24, 0x45	; 69
 818:	40 f4       	brcc	.+16     	; 0x82a <DIO_TOGGLE_BIT+0x1a>
 81a:	82 34       	cpi	r24, 0x42	; 66
 81c:	f9 f0       	breq	.+62     	; 0x85c <DIO_TOGGLE_BIT+0x4c>
 81e:	83 34       	cpi	r24, 0x43	; 67
 820:	50 f5       	brcc	.+84     	; 0x876 <__stack+0x17>
 822:	81 34       	cpi	r24, 0x41	; 65
 824:	09 f0       	breq	.+2      	; 0x828 <DIO_TOGGLE_BIT+0x18>
 826:	40 c0       	rjmp	.+128    	; 0x8a8 <__stack+0x49>
 828:	0c c0       	rjmp	.+24     	; 0x842 <DIO_TOGGLE_BIT+0x32>
 82a:	82 36       	cpi	r24, 0x62	; 98
 82c:	b9 f0       	breq	.+46     	; 0x85c <DIO_TOGGLE_BIT+0x4c>
 82e:	83 36       	cpi	r24, 0x63	; 99
 830:	18 f4       	brcc	.+6      	; 0x838 <DIO_TOGGLE_BIT+0x28>
 832:	81 36       	cpi	r24, 0x61	; 97
 834:	c9 f5       	brne	.+114    	; 0x8a8 <__stack+0x49>
 836:	05 c0       	rjmp	.+10     	; 0x842 <DIO_TOGGLE_BIT+0x32>
 838:	83 36       	cpi	r24, 0x63	; 99
 83a:	e9 f0       	breq	.+58     	; 0x876 <__stack+0x17>
 83c:	84 36       	cpi	r24, 0x64	; 100
 83e:	a1 f5       	brne	.+104    	; 0x8a8 <__stack+0x49>
 840:	27 c0       	rjmp	.+78     	; 0x890 <__stack+0x31>
	{
		case 'A':
		case 'a':
			TOG_BIT(DDRA,pin);
 842:	2a b3       	in	r18, 0x1a	; 26
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	ac 01       	movw	r20, r24
 84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_TOGGLE_BIT+0x40>
 84c:	44 0f       	add	r20, r20
 84e:	55 1f       	adc	r21, r21
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_TOGGLE_BIT+0x3c>
 854:	ba 01       	movw	r22, r20
 856:	62 27       	eor	r22, r18
 858:	6a bb       	out	0x1a, r22	; 26
			break;
 85a:	08 95       	ret
		case 'B':
		case 'b':
			TOG_BIT(DDRB,pin);
 85c:	27 b3       	in	r18, 0x17	; 23
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	ac 01       	movw	r20, r24
 864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
 866:	44 0f       	add	r20, r20
 868:	55 1f       	adc	r21, r21
 86a:	6a 95       	dec	r22
 86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
 86e:	ba 01       	movw	r22, r20
 870:	62 27       	eor	r22, r18
 872:	67 bb       	out	0x17, r22	; 23
			break;
 874:	08 95       	ret
		case 'C':
		case 'c':
			TOG_BIT(DDRC,pin);
 876:	24 b3       	in	r18, 0x14	; 20
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	ac 01       	movw	r20, r24
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	44 0f       	add	r20, r20
 882:	55 1f       	adc	r21, r21
 884:	6a 95       	dec	r22
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	ba 01       	movw	r22, r20
 88a:	62 27       	eor	r22, r18
 88c:	64 bb       	out	0x14, r22	; 20
			break;
 88e:	08 95       	ret
		case 'D':
		case 'd':
			TOG_BIT(DDRD,pin);
 890:	21 b3       	in	r18, 0x11	; 17
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	ac 01       	movw	r20, r24
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	44 0f       	add	r20, r20
 89c:	55 1f       	adc	r21, r21
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	ba 01       	movw	r22, r20
 8a4:	62 27       	eor	r22, r18
 8a6:	61 bb       	out	0x11, r22	; 17
 8a8:	08 95       	ret

000008aa <DIO_READ>:
	}
}
char DIO_READ(char port , char pin )
{
	unsigned char val;
	switch(port)
 8aa:	84 34       	cpi	r24, 0x44	; 68
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <DIO_READ+0x6>
 8ae:	51 c0       	rjmp	.+162    	; 0x952 <DIO_READ+0xa8>
 8b0:	85 34       	cpi	r24, 0x45	; 69
 8b2:	40 f4       	brcc	.+16     	; 0x8c4 <DIO_READ+0x1a>
 8b4:	82 34       	cpi	r24, 0x42	; 66
 8b6:	39 f1       	breq	.+78     	; 0x906 <DIO_READ+0x5c>
 8b8:	83 34       	cpi	r24, 0x43	; 67
 8ba:	c0 f5       	brcc	.+112    	; 0x92c <DIO_READ+0x82>
 8bc:	81 34       	cpi	r24, 0x41	; 65
 8be:	09 f0       	breq	.+2      	; 0x8c2 <DIO_READ+0x18>
 8c0:	5a c0       	rjmp	.+180    	; 0x976 <DIO_READ+0xcc>
 8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <DIO_READ+0x36>
 8c4:	82 36       	cpi	r24, 0x62	; 98
 8c6:	f9 f0       	breq	.+62     	; 0x906 <DIO_READ+0x5c>
 8c8:	83 36       	cpi	r24, 0x63	; 99
 8ca:	20 f4       	brcc	.+8      	; 0x8d4 <DIO_READ+0x2a>
 8cc:	81 36       	cpi	r24, 0x61	; 97
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <DIO_READ+0x28>
 8d0:	52 c0       	rjmp	.+164    	; 0x976 <DIO_READ+0xcc>
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <DIO_READ+0x36>
 8d4:	83 36       	cpi	r24, 0x63	; 99
 8d6:	51 f1       	breq	.+84     	; 0x92c <DIO_READ+0x82>
 8d8:	84 36       	cpi	r24, 0x64	; 100
 8da:	09 f0       	breq	.+2      	; 0x8de <DIO_READ+0x34>
 8dc:	4c c0       	rjmp	.+152    	; 0x976 <DIO_READ+0xcc>
 8de:	39 c0       	rjmp	.+114    	; 0x952 <DIO_READ+0xa8>
	{
		case 'A':
		case 'a':
		 val=READ_BIT(PINA,pin);
 8e0:	29 b3       	in	r18, 0x19	; 25
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	06 2e       	mov	r0, r22
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <DIO_READ+0x44>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	0a 94       	dec	r0
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <DIO_READ+0x40>
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	82 23       	and	r24, r18
 8f6:	93 23       	and	r25, r19
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <DIO_READ+0x54>
 8fa:	95 95       	asr	r25
 8fc:	87 95       	ror	r24
 8fe:	6a 95       	dec	r22
 900:	e2 f7       	brpl	.-8      	; 0x8fa <DIO_READ+0x50>
 902:	98 2f       	mov	r25, r24
		break;
 904:	38 c0       	rjmp	.+112    	; 0x976 <DIO_READ+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin);
 906:	26 b3       	in	r18, 0x16	; 22
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	06 2e       	mov	r0, r22
 90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_READ+0x6a>
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	0a 94       	dec	r0
 916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_READ+0x66>
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	82 23       	and	r24, r18
 91c:	93 23       	and	r25, r19
 91e:	02 c0       	rjmp	.+4      	; 0x924 <DIO_READ+0x7a>
 920:	95 95       	asr	r25
 922:	87 95       	ror	r24
 924:	6a 95       	dec	r22
 926:	e2 f7       	brpl	.-8      	; 0x920 <DIO_READ+0x76>
 928:	98 2f       	mov	r25, r24
		break;
 92a:	25 c0       	rjmp	.+74     	; 0x976 <DIO_READ+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin);
 92c:	23 b3       	in	r18, 0x13	; 19
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	06 2e       	mov	r0, r22
 934:	02 c0       	rjmp	.+4      	; 0x93a <DIO_READ+0x90>
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	0a 94       	dec	r0
 93c:	e2 f7       	brpl	.-8      	; 0x936 <DIO_READ+0x8c>
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	82 23       	and	r24, r18
 942:	93 23       	and	r25, r19
 944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_READ+0xa0>
 946:	95 95       	asr	r25
 948:	87 95       	ror	r24
 94a:	6a 95       	dec	r22
 94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_READ+0x9c>
 94e:	98 2f       	mov	r25, r24
		break;
 950:	12 c0       	rjmp	.+36     	; 0x976 <DIO_READ+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin);
 952:	20 b3       	in	r18, 0x10	; 16
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	06 2e       	mov	r0, r22
 95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_READ+0xb6>
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	0a 94       	dec	r0
 962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_READ+0xb2>
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	82 23       	and	r24, r18
 968:	93 23       	and	r25, r19
 96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_READ+0xc6>
 96c:	95 95       	asr	r25
 96e:	87 95       	ror	r24
 970:	6a 95       	dec	r22
 972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_READ+0xc2>
 974:	98 2f       	mov	r25, r24
		break;
		default:break;
	}
	return val;
}
 976:	89 2f       	mov	r24, r25
 978:	08 95       	ret

0000097a <DIO_SETPORT_DIR>:
void DIO_SETPORT_DIR(char port, char dir)
{
	switch(port)
 97a:	84 34       	cpi	r24, 0x44	; 68
 97c:	d9 f0       	breq	.+54     	; 0x9b4 <DIO_SETPORT_DIR+0x3a>
 97e:	85 34       	cpi	r24, 0x45	; 69
 980:	38 f4       	brcc	.+14     	; 0x990 <DIO_SETPORT_DIR+0x16>
 982:	82 34       	cpi	r24, 0x42	; 66
 984:	99 f0       	breq	.+38     	; 0x9ac <DIO_SETPORT_DIR+0x32>
 986:	83 34       	cpi	r24, 0x43	; 67
 988:	98 f4       	brcc	.+38     	; 0x9b0 <DIO_SETPORT_DIR+0x36>
 98a:	81 34       	cpi	r24, 0x41	; 65
 98c:	a1 f4       	brne	.+40     	; 0x9b6 <DIO_SETPORT_DIR+0x3c>
 98e:	0c c0       	rjmp	.+24     	; 0x9a8 <DIO_SETPORT_DIR+0x2e>
 990:	82 36       	cpi	r24, 0x62	; 98
 992:	61 f0       	breq	.+24     	; 0x9ac <DIO_SETPORT_DIR+0x32>
 994:	83 36       	cpi	r24, 0x63	; 99
 996:	18 f4       	brcc	.+6      	; 0x99e <DIO_SETPORT_DIR+0x24>
 998:	81 36       	cpi	r24, 0x61	; 97
 99a:	69 f4       	brne	.+26     	; 0x9b6 <DIO_SETPORT_DIR+0x3c>
 99c:	05 c0       	rjmp	.+10     	; 0x9a8 <DIO_SETPORT_DIR+0x2e>
 99e:	83 36       	cpi	r24, 0x63	; 99
 9a0:	39 f0       	breq	.+14     	; 0x9b0 <DIO_SETPORT_DIR+0x36>
 9a2:	84 36       	cpi	r24, 0x64	; 100
 9a4:	41 f4       	brne	.+16     	; 0x9b6 <DIO_SETPORT_DIR+0x3c>
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <DIO_SETPORT_DIR+0x3a>
	{
		case 'A':
		case 'a':
			DDRA=dir;
 9a8:	6a bb       	out	0x1a, r22	; 26
		break;
 9aa:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
 9ac:	67 bb       	out	0x17, r22	; 23
		break;
 9ae:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
 9b0:	64 bb       	out	0x14, r22	; 20
		break;
 9b2:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
 9b4:	61 bb       	out	0x11, r22	; 17
 9b6:	08 95       	ret

000009b8 <DIO_TOGGLE_PORT>:
		break;
	}
}
void DIO_TOGGLE_PORT(char port)
{
	switch (port)
 9b8:	82 34       	cpi	r24, 0x42	; 66
 9ba:	71 f0       	breq	.+28     	; 0x9d8 <DIO_TOGGLE_PORT+0x20>
 9bc:	83 34       	cpi	r24, 0x43	; 67
 9be:	18 f4       	brcc	.+6      	; 0x9c6 <DIO_TOGGLE_PORT+0xe>
 9c0:	81 34       	cpi	r24, 0x41	; 65
 9c2:	a9 f4       	brne	.+42     	; 0x9ee <DIO_TOGGLE_PORT+0x36>
 9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <DIO_TOGGLE_PORT+0x18>
 9c6:	83 34       	cpi	r24, 0x43	; 67
 9c8:	59 f0       	breq	.+22     	; 0x9e0 <DIO_TOGGLE_PORT+0x28>
 9ca:	84 34       	cpi	r24, 0x44	; 68
 9cc:	81 f4       	brne	.+32     	; 0x9ee <DIO_TOGGLE_PORT+0x36>
 9ce:	0c c0       	rjmp	.+24     	; 0x9e8 <DIO_TOGGLE_PORT+0x30>
	{
		case 'A':
			PORTA ^= 0xFF;
 9d0:	8b b3       	in	r24, 0x1b	; 27
 9d2:	80 95       	com	r24
 9d4:	8b bb       	out	0x1b, r24	; 27
		break;
 9d6:	08 95       	ret
			
		case 'B':
		PORTA ^= 0xFF;
 9d8:	8b b3       	in	r24, 0x1b	; 27
 9da:	80 95       	com	r24
 9dc:	8b bb       	out	0x1b, r24	; 27
		break;
 9de:	08 95       	ret
		case 'C':
		PORTA ^= 0xFF;
 9e0:	8b b3       	in	r24, 0x1b	; 27
 9e2:	80 95       	com	r24
 9e4:	8b bb       	out	0x1b, r24	; 27
		break;
 9e6:	08 95       	ret
		case 'D':
		PORTA ^= 0xFF;
 9e8:	8b b3       	in	r24, 0x1b	; 27
 9ea:	80 95       	com	r24
 9ec:	8b bb       	out	0x1b, r24	; 27
 9ee:	08 95       	ret

000009f0 <DIO_write_port>:
		
	}
}
void DIO_write_port(char port , char val)
{
	switch(port)
 9f0:	84 34       	cpi	r24, 0x44	; 68
 9f2:	d9 f0       	breq	.+54     	; 0xa2a <DIO_write_port+0x3a>
 9f4:	85 34       	cpi	r24, 0x45	; 69
 9f6:	38 f4       	brcc	.+14     	; 0xa06 <DIO_write_port+0x16>
 9f8:	82 34       	cpi	r24, 0x42	; 66
 9fa:	99 f0       	breq	.+38     	; 0xa22 <DIO_write_port+0x32>
 9fc:	83 34       	cpi	r24, 0x43	; 67
 9fe:	98 f4       	brcc	.+38     	; 0xa26 <DIO_write_port+0x36>
 a00:	81 34       	cpi	r24, 0x41	; 65
 a02:	a1 f4       	brne	.+40     	; 0xa2c <DIO_write_port+0x3c>
 a04:	0c c0       	rjmp	.+24     	; 0xa1e <DIO_write_port+0x2e>
 a06:	82 36       	cpi	r24, 0x62	; 98
 a08:	61 f0       	breq	.+24     	; 0xa22 <DIO_write_port+0x32>
 a0a:	83 36       	cpi	r24, 0x63	; 99
 a0c:	18 f4       	brcc	.+6      	; 0xa14 <DIO_write_port+0x24>
 a0e:	81 36       	cpi	r24, 0x61	; 97
 a10:	69 f4       	brne	.+26     	; 0xa2c <DIO_write_port+0x3c>
 a12:	05 c0       	rjmp	.+10     	; 0xa1e <DIO_write_port+0x2e>
 a14:	83 36       	cpi	r24, 0x63	; 99
 a16:	39 f0       	breq	.+14     	; 0xa26 <DIO_write_port+0x36>
 a18:	84 36       	cpi	r24, 0x64	; 100
 a1a:	41 f4       	brne	.+16     	; 0xa2c <DIO_write_port+0x3c>
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <DIO_write_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 a1e:	6b bb       	out	0x1b, r22	; 27
		break;
 a20:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 a22:	68 bb       	out	0x18, r22	; 24
		break;
 a24:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 a26:	65 bb       	out	0x15, r22	; 21
		break;
 a28:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 a2a:	62 bb       	out	0x12, r22	; 18
 a2c:	08 95       	ret

00000a2e <DIO_SET_high_nipple>:
		break;
	}
}
void DIO_SET_high_nipple(char port)
{
 a2e:	cf 93       	push	r28
 a30:	c8 2f       	mov	r28, r24
			DIO_SETPIN_DIR(port,4,1);
 a32:	64 e0       	ldi	r22, 0x04	; 4
 a34:	41 e0       	ldi	r20, 0x01	; 1
 a36:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
			DIO_SETPIN_DIR(port,5,1);
 a3a:	8c 2f       	mov	r24, r28
 a3c:	65 e0       	ldi	r22, 0x05	; 5
 a3e:	41 e0       	ldi	r20, 0x01	; 1
 a40:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
			DIO_SETPIN_DIR(port,6,1);
 a44:	8c 2f       	mov	r24, r28
 a46:	66 e0       	ldi	r22, 0x06	; 6
 a48:	41 e0       	ldi	r20, 0x01	; 1
 a4a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
			DIO_SETPIN_DIR(port,7,1);
 a4e:	8c 2f       	mov	r24, r28
 a50:	67 e0       	ldi	r22, 0x07	; 7
 a52:	41 e0       	ldi	r20, 0x01	; 1
 a54:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
			

}
 a58:	cf 91       	pop	r28
 a5a:	08 95       	ret

00000a5c <DIO_write_High_nipple>:
void DIO_write_High_nipple(char port,char val)
{
 a5c:	0f 93       	push	r16
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	c8 2f       	mov	r28, r24
 a64:	06 2f       	mov	r16, r22
		DIO_WRITE(port,4,READ_BIT(val,0));
 a66:	46 2f       	mov	r20, r22
 a68:	41 70       	andi	r20, 0x01	; 1
 a6a:	64 e0       	ldi	r22, 0x04	; 4
 a6c:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
		DIO_WRITE(port,5,READ_BIT(val,1));
 a70:	10 e0       	ldi	r17, 0x00	; 0
 a72:	a8 01       	movw	r20, r16
 a74:	42 70       	andi	r20, 0x02	; 2
 a76:	50 70       	andi	r21, 0x00	; 0
 a78:	55 95       	asr	r21
 a7a:	47 95       	ror	r20
 a7c:	8c 2f       	mov	r24, r28
 a7e:	65 e0       	ldi	r22, 0x05	; 5
 a80:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
		DIO_WRITE(port,6,READ_BIT(val,2));
 a84:	a8 01       	movw	r20, r16
 a86:	44 70       	andi	r20, 0x04	; 4
 a88:	50 70       	andi	r21, 0x00	; 0
 a8a:	55 95       	asr	r21
 a8c:	47 95       	ror	r20
 a8e:	55 95       	asr	r21
 a90:	47 95       	ror	r20
 a92:	8c 2f       	mov	r24, r28
 a94:	66 e0       	ldi	r22, 0x06	; 6
 a96:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
		DIO_WRITE(port,7,READ_BIT(val,3));
 a9a:	08 70       	andi	r16, 0x08	; 8
 a9c:	10 70       	andi	r17, 0x00	; 0
 a9e:	a8 01       	movw	r20, r16
 aa0:	55 95       	asr	r21
 aa2:	47 95       	ror	r20
 aa4:	55 95       	asr	r21
 aa6:	47 95       	ror	r20
 aa8:	55 95       	asr	r21
 aaa:	47 95       	ror	r20
 aac:	8c 2f       	mov	r24, r28
 aae:	67 e0       	ldi	r22, 0x07	; 7
 ab0:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>

}
 ab4:	cf 91       	pop	r28
 ab6:	1f 91       	pop	r17
 ab8:	0f 91       	pop	r16
 aba:	08 95       	ret

00000abc <DIO_pullup_connect>:
void DIO_pullup_connect(char port,char pin , char connect)
{
	DIO_WRITE(port,pin,connect);
 abc:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
 ac0:	08 95       	ret

00000ac2 <keypad_vinit>:
#include "DIO.h"
#define keypad_port 'D'
#define NOT_PRESSED  0xff
void keypad_vinit(void)
{
	DIO_SETPIN_DIR(keypad_port,0,1);
 ac2:	84 e4       	ldi	r24, 0x44	; 68
 ac4:	60 e0       	ldi	r22, 0x00	; 0
 ac6:	41 e0       	ldi	r20, 0x01	; 1
 ac8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(keypad_port,1,1);
 acc:	84 e4       	ldi	r24, 0x44	; 68
 ace:	61 e0       	ldi	r22, 0x01	; 1
 ad0:	41 e0       	ldi	r20, 0x01	; 1
 ad2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(keypad_port,2,1);	
 ad6:	84 e4       	ldi	r24, 0x44	; 68
 ad8:	62 e0       	ldi	r22, 0x02	; 2
 ada:	41 e0       	ldi	r20, 0x01	; 1
 adc:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(keypad_port,3,1);	
 ae0:	84 e4       	ldi	r24, 0x44	; 68
 ae2:	63 e0       	ldi	r22, 0x03	; 3
 ae4:	41 e0       	ldi	r20, 0x01	; 1
 ae6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(keypad_port,4,0);
 aea:	84 e4       	ldi	r24, 0x44	; 68
 aec:	64 e0       	ldi	r22, 0x04	; 4
 aee:	40 e0       	ldi	r20, 0x00	; 0
 af0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(keypad_port,5,0);
 af4:	84 e4       	ldi	r24, 0x44	; 68
 af6:	65 e0       	ldi	r22, 0x05	; 5
 af8:	40 e0       	ldi	r20, 0x00	; 0
 afa:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(keypad_port,6,0);
 afe:	84 e4       	ldi	r24, 0x44	; 68
 b00:	66 e0       	ldi	r22, 0x06	; 6
 b02:	40 e0       	ldi	r20, 0x00	; 0
 b04:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(keypad_port,7,0);
 b08:	84 e4       	ldi	r24, 0x44	; 68
 b0a:	67 e0       	ldi	r22, 0x07	; 7
 b0c:	40 e0       	ldi	r20, 0x00	; 0
 b0e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_pullup_connect(keypad_port,4,1);
 b12:	84 e4       	ldi	r24, 0x44	; 68
 b14:	64 e0       	ldi	r22, 0x04	; 4
 b16:	41 e0       	ldi	r20, 0x01	; 1
 b18:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_pullup_connect>
	DIO_pullup_connect(keypad_port,5,1);
 b1c:	84 e4       	ldi	r24, 0x44	; 68
 b1e:	65 e0       	ldi	r22, 0x05	; 5
 b20:	41 e0       	ldi	r20, 0x01	; 1
 b22:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_pullup_connect>
	DIO_pullup_connect(keypad_port,6,1);
 b26:	84 e4       	ldi	r24, 0x44	; 68
 b28:	66 e0       	ldi	r22, 0x06	; 6
 b2a:	41 e0       	ldi	r20, 0x01	; 1
 b2c:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_pullup_connect>
	DIO_pullup_connect(keypad_port,7,1);
 b30:	84 e4       	ldi	r24, 0x44	; 68
 b32:	67 e0       	ldi	r22, 0x07	; 7
 b34:	41 e0       	ldi	r20, 0x01	; 1
 b36:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_pullup_connect>
}
 b3a:	08 95       	ret

00000b3c <keypad_checkpress>:
char keypad_checkpress(void)
{
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	60 97       	sbiw	r28, 0x10	; 16
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 b54:	de 01       	movw	r26, r28
 b56:	11 96       	adiw	r26, 0x01	; 1
 b58:	e0 e6       	ldi	r30, 0x60	; 96
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	80 e1       	ldi	r24, 0x10	; 16
 b5e:	01 90       	ld	r0, Z+
 b60:	0d 92       	st	X+, r0
 b62:	81 50       	subi	r24, 0x01	; 1
 b64:	e1 f7       	brne	.-8      	; 0xb5e <keypad_checkpress+0x22>
		char row,col,x;
		char return_var=NOT_PRESSED;
		for (row=0;row<4;row++)
 b66:	00 e0       	ldi	r16, 0x00	; 0
		{
			DIO_WRITE(keypad_port,0,1);
 b68:	84 e4       	ldi	r24, 0x44	; 68
 b6a:	60 e0       	ldi	r22, 0x00	; 0
 b6c:	41 e0       	ldi	r20, 0x01	; 1
 b6e:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
			DIO_WRITE(keypad_port,1,1);
 b72:	84 e4       	ldi	r24, 0x44	; 68
 b74:	61 e0       	ldi	r22, 0x01	; 1
 b76:	41 e0       	ldi	r20, 0x01	; 1
 b78:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
			DIO_WRITE(keypad_port,2,1);
 b7c:	84 e4       	ldi	r24, 0x44	; 68
 b7e:	62 e0       	ldi	r22, 0x02	; 2
 b80:	41 e0       	ldi	r20, 0x01	; 1
 b82:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
			DIO_WRITE(keypad_port,3,1);
 b86:	84 e4       	ldi	r24, 0x44	; 68
 b88:	63 e0       	ldi	r22, 0x03	; 3
 b8a:	41 e0       	ldi	r20, 0x01	; 1
 b8c:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
			DIO_WRITE(keypad_port,row,0);
 b90:	84 e4       	ldi	r24, 0x44	; 68
 b92:	60 2f       	mov	r22, r16
 b94:	40 e0       	ldi	r20, 0x00	; 0
 b96:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
			for (col=0;col<4;col++)
 b9a:	10 e0       	ldi	r17, 0x00	; 0
			{
				x=DIO_READ(keypad_port,col+4);
 b9c:	61 2f       	mov	r22, r17
 b9e:	6c 5f       	subi	r22, 0xFC	; 252
 ba0:	84 e4       	ldi	r24, 0x44	; 68
 ba2:	0e 94 55 04 	call	0x8aa	; 0x8aa <DIO_READ>
				if (x==0)
 ba6:	88 23       	and	r24, r24
 ba8:	61 f4       	brne	.+24     	; 0xbc2 <keypad_checkpress+0x86>
				{
					return_var=arr[row][col];
 baa:	e0 2f       	mov	r30, r16
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	ee 0f       	add	r30, r30
 bb0:	ff 1f       	adc	r31, r31
 bb2:	ee 0f       	add	r30, r30
 bb4:	ff 1f       	adc	r31, r31
 bb6:	e1 0f       	add	r30, r17
 bb8:	f1 1d       	adc	r31, r1
 bba:	ec 0f       	add	r30, r28
 bbc:	fd 1f       	adc	r31, r29
 bbe:	81 81       	ldd	r24, Z+1	; 0x01
 bc0:	04 c0       	rjmp	.+8      	; 0xbca <keypad_checkpress+0x8e>
			DIO_WRITE(keypad_port,0,1);
			DIO_WRITE(keypad_port,1,1);
			DIO_WRITE(keypad_port,2,1);
			DIO_WRITE(keypad_port,3,1);
			DIO_WRITE(keypad_port,row,0);
			for (col=0;col<4;col++)
 bc2:	1f 5f       	subi	r17, 0xFF	; 255
 bc4:	14 30       	cpi	r17, 0x04	; 4
 bc6:	51 f7       	brne	.-44     	; 0xb9c <keypad_checkpress+0x60>
 bc8:	0b c0       	rjmp	.+22     	; 0xbe0 <keypad_checkpress+0xa4>
				break;
			}
	
		}
		return return_var;
 bca:	60 96       	adiw	r28, 0x10	; 16
 bcc:	0f b6       	in	r0, 0x3f	; 63
 bce:	f8 94       	cli
 bd0:	de bf       	out	0x3e, r29	; 62
 bd2:	0f be       	out	0x3f, r0	; 63
 bd4:	cd bf       	out	0x3d, r28	; 61
 bd6:	df 91       	pop	r29
 bd8:	cf 91       	pop	r28
 bda:	1f 91       	pop	r17
 bdc:	0f 91       	pop	r16
 bde:	08 95       	ret
char keypad_checkpress(void)
{
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
		char row,col,x;
		char return_var=NOT_PRESSED;
		for (row=0;row<4;row++)
 be0:	0f 5f       	subi	r16, 0xFF	; 255
 be2:	04 30       	cpi	r16, 0x04	; 4
 be4:	09 f6       	brne	.-126    	; 0xb68 <keypad_checkpress+0x2c>
 be6:	8f ef       	ldi	r24, 0xFF	; 255
 be8:	f0 cf       	rjmp	.-32     	; 0xbca <keypad_checkpress+0x8e>

00000bea <enable>:
		ptr++;
	}
}
void  enable(void)
{
	DIO_WRITE(PORT_CONTROL,EN,1);
 bea:	82 e4       	ldi	r24, 0x42	; 66
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	60 e0       	ldi	r22, 0x00	; 0
 bf0:	70 e0       	ldi	r23, 0x00	; 0
 bf2:	41 e0       	ldi	r20, 0x01	; 1
 bf4:	50 e0       	ldi	r21, 0x00	; 0
 bf6:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
 bfa:	8f e9       	ldi	r24, 0x9F	; 159
 bfc:	9f e0       	ldi	r25, 0x0F	; 15
 bfe:	01 97       	sbiw	r24, 0x01	; 1
 c00:	f1 f7       	brne	.-4      	; 0xbfe <enable+0x14>
 c02:	00 c0       	rjmp	.+0      	; 0xc04 <enable+0x1a>
 c04:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE(PORT_CONTROL,EN,0);
 c06:	82 e4       	ldi	r24, 0x42	; 66
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	60 e0       	ldi	r22, 0x00	; 0
 c0c:	70 e0       	ldi	r23, 0x00	; 0
 c0e:	40 e0       	ldi	r20, 0x00	; 0
 c10:	50 e0       	ldi	r21, 0x00	; 0
 c12:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
 c16:	8f e9       	ldi	r24, 0x9F	; 159
 c18:	9f e0       	ldi	r25, 0x0F	; 15
 c1a:	01 97       	sbiw	r24, 0x01	; 1
 c1c:	f1 f7       	brne	.-4      	; 0xc1a <enable+0x30>
 c1e:	00 c0       	rjmp	.+0      	; 0xc20 <enable+0x36>
 c20:	00 00       	nop
	_delay_ms(2);

 c22:	08 95       	ret

00000c24 <LCD_vsend_cmd>:
	}
	#endif
	_delay_ms(1);
}	
void LCD_vsend_cmd(char cmd)
{
 c24:	68 2f       	mov	r22, r24
	#if defined	eight_bit_mode
{
	DIO_write_port(PORT_DATA,cmd);
 c26:	81 e4       	ldi	r24, 0x41	; 65
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <DIO_write_port>
	DIO_WRITE(PORT_CONTROL,RS,0);
 c30:	82 e4       	ldi	r24, 0x42	; 66
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	61 e0       	ldi	r22, 0x01	; 1
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	40 e0       	ldi	r20, 0x00	; 0
 c3a:	50 e0       	ldi	r21, 0x00	; 0
 c3c:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
	enable();
 c40:	0e 94 f5 05 	call	0xbea	; 0xbea <enable>
 c44:	8f ec       	ldi	r24, 0xCF	; 207
 c46:	97 e0       	ldi	r25, 0x07	; 7
 c48:	01 97       	sbiw	r24, 0x01	; 1
 c4a:	f1 f7       	brne	.-4      	; 0xc48 <LCD_vsend_cmd+0x24>
 c4c:	00 c0       	rjmp	.+0      	; 0xc4e <LCD_vsend_cmd+0x2a>
 c4e:	00 00       	nop
	DIO_WRITE(PORT_CONTROL,RS,0);
	enable();
	}	
	#endif
	_delay_ms(1);
}
 c50:	08 95       	ret

00000c52 <LCD_clearscreen>:
	}
	LCD_vsend_cmd(cmd);
}
void LCD_clearscreen(void)
{
	LCD_vsend_cmd(CLR_SCREEN);
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_vsend_cmd>
 c58:	8f e1       	ldi	r24, 0x1F	; 31
 c5a:	9e e4       	ldi	r25, 0x4E	; 78
 c5c:	01 97       	sbiw	r24, 0x01	; 1
 c5e:	f1 f7       	brne	.-4      	; 0xc5c <LCD_clearscreen+0xa>
 c60:	00 c0       	rjmp	.+0      	; 0xc62 <LCD_clearscreen+0x10>
 c62:	00 00       	nop
	_delay_ms(10);
}
 c64:	08 95       	ret

00000c66 <LCD_move_cursor>:
	
}
void LCD_move_cursor(char row,char col)
{
	char cmd;
	if (row<1 || row>2 || col<1 || col>16)
 c66:	98 2f       	mov	r25, r24
 c68:	91 50       	subi	r25, 0x01	; 1
 c6a:	92 30       	cpi	r25, 0x02	; 2
 c6c:	60 f4       	brcc	.+24     	; 0xc86 <LCD_move_cursor+0x20>
 c6e:	66 23       	and	r22, r22
 c70:	61 f0       	breq	.+24     	; 0xc8a <LCD_move_cursor+0x24>
 c72:	61 31       	cpi	r22, 0x11	; 17
 c74:	60 f4       	brcc	.+24     	; 0xc8e <LCD_move_cursor+0x28>
	{
		cmd=0x80;
	}
	else if(row==1)
 c76:	81 30       	cpi	r24, 0x01	; 1
 c78:	19 f4       	brne	.+6      	; 0xc80 <LCD_move_cursor+0x1a>
	{
		cmd=0x80+col-1;
 c7a:	86 2f       	mov	r24, r22
 c7c:	81 58       	subi	r24, 0x81	; 129
 c7e:	08 c0       	rjmp	.+16     	; 0xc90 <LCD_move_cursor+0x2a>
	}
	else
	{
		cmd=0xc0+col-1;
 c80:	86 2f       	mov	r24, r22
 c82:	81 54       	subi	r24, 0x41	; 65
 c84:	05 c0       	rjmp	.+10     	; 0xc90 <LCD_move_cursor+0x2a>
void LCD_move_cursor(char row,char col)
{
	char cmd;
	if (row<1 || row>2 || col<1 || col>16)
	{
		cmd=0x80;
 c86:	80 e8       	ldi	r24, 0x80	; 128
 c88:	03 c0       	rjmp	.+6      	; 0xc90 <LCD_move_cursor+0x2a>
 c8a:	80 e8       	ldi	r24, 0x80	; 128
 c8c:	01 c0       	rjmp	.+2      	; 0xc90 <LCD_move_cursor+0x2a>
 c8e:	80 e8       	ldi	r24, 0x80	; 128
	}
	else
	{
		cmd=0xc0+col-1;
	}
	LCD_vsend_cmd(cmd);
 c90:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_vsend_cmd>
}
 c94:	08 95       	ret

00000c96 <LCD_init>:
 c96:	8f ef       	ldi	r24, 0xFF	; 255
 c98:	91 ee       	ldi	r25, 0xE1	; 225
 c9a:	a4 e0       	ldi	r26, 0x04	; 4
 c9c:	81 50       	subi	r24, 0x01	; 1
 c9e:	90 40       	sbci	r25, 0x00	; 0
 ca0:	a0 40       	sbci	r26, 0x00	; 0
 ca2:	e1 f7       	brne	.-8      	; 0xc9c <LCD_init+0x6>
 ca4:	00 c0       	rjmp	.+0      	; 0xca6 <LCD_init+0x10>
 ca6:	00 00       	nop
	_delay_ms(200);	
	#if defined eight_bit_mode
	{
		
	
	DIO_SETPORT_DIR(PORT_DATA,0xff);
 ca8:	81 e4       	ldi	r24, 0x41	; 65
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	6f ef       	ldi	r22, 0xFF	; 255
 cae:	70 e0       	ldi	r23, 0x00	; 0
 cb0:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_SETPORT_DIR>
	DIO_SETPIN_DIR(PORT_CONTROL,EN,1);
 cb4:	82 e4       	ldi	r24, 0x42	; 66
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	60 e0       	ldi	r22, 0x00	; 0
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	41 e0       	ldi	r20, 0x01	; 1
 cbe:	50 e0       	ldi	r21, 0x00	; 0
 cc0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(PORT_CONTROL,RS,1);	
 cc4:	82 e4       	ldi	r24, 0x42	; 66
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	61 e0       	ldi	r22, 0x01	; 1
 cca:	70 e0       	ldi	r23, 0x00	; 0
 ccc:	41 e0       	ldi	r20, 0x01	; 1
 cce:	50 e0       	ldi	r21, 0x00	; 0
 cd0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_SETPIN_DIR(PORT_CONTROL,RW,1);	
 cd4:	82 e4       	ldi	r24, 0x42	; 66
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	62 e0       	ldi	r22, 0x02	; 2
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	41 e0       	ldi	r20, 0x01	; 1
 cde:	50 e0       	ldi	r21, 0x00	; 0
 ce0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_SETPIN_DIR>
	DIO_WRITE(PORT_CONTROL,RW,0);
 ce4:	82 e4       	ldi	r24, 0x42	; 66
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	62 e0       	ldi	r22, 0x02	; 2
 cea:	70 e0       	ldi	r23, 0x00	; 0
 cec:	40 e0       	ldi	r20, 0x00	; 0
 cee:	50 e0       	ldi	r21, 0x00	; 0
 cf0:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
	LCD_vsend_cmd(EIGHT_BITS);
 cf4:	88 e3       	ldi	r24, 0x38	; 56
 cf6:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_vsend_cmd>
 cfa:	af ec       	ldi	r26, 0xCF	; 207
 cfc:	b7 e0       	ldi	r27, 0x07	; 7
 cfe:	11 97       	sbiw	r26, 0x01	; 1
 d00:	f1 f7       	brne	.-4      	; 0xcfe <LCD_init+0x68>
 d02:	00 c0       	rjmp	.+0      	; 0xd04 <LCD_init+0x6e>
 d04:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CURSOR_DISPLAY);
 d06:	8c e0       	ldi	r24, 0x0C	; 12
 d08:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_vsend_cmd>
 d0c:	8f ec       	ldi	r24, 0xCF	; 207
 d0e:	97 e0       	ldi	r25, 0x07	; 7
 d10:	01 97       	sbiw	r24, 0x01	; 1
 d12:	f1 f7       	brne	.-4      	; 0xd10 <LCD_init+0x7a>
 d14:	00 c0       	rjmp	.+0      	; 0xd16 <LCD_init+0x80>
 d16:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CLR_SCREEN);
 d18:	81 e0       	ldi	r24, 0x01	; 1
 d1a:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_vsend_cmd>
 d1e:	af e1       	ldi	r26, 0x1F	; 31
 d20:	be e4       	ldi	r27, 0x4E	; 78
 d22:	11 97       	sbiw	r26, 0x01	; 1
 d24:	f1 f7       	brne	.-4      	; 0xd22 <LCD_init+0x8c>
 d26:	00 c0       	rjmp	.+0      	; 0xd28 <LCD_init+0x92>
 d28:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(ENTRY_MODE);
 d2a:	86 e0       	ldi	r24, 0x06	; 6
 d2c:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_vsend_cmd>
 d30:	8f ec       	ldi	r24, 0xCF	; 207
 d32:	97 e0       	ldi	r25, 0x07	; 7
 d34:	01 97       	sbiw	r24, 0x01	; 1
 d36:	f1 f7       	brne	.-4      	; 0xd34 <LCD_init+0x9e>
 d38:	00 c0       	rjmp	.+0      	; 0xd3a <LCD_init+0xa4>
 d3a:	00 00       	nop
	LCD_vsend_cmd(ENTRY_MODE);
	_delay_ms(1);		
}	
	#endif
	
}
 d3c:	08 95       	ret

00000d3e <LCD_vsend_char>:
#define CURSOR_DISPLAY 0x0c
#include "LCD.h"
#define F_CPU	8000000UL
#include <util/delay.h>
void LCD_vsend_char(char data)
{
 d3e:	68 2f       	mov	r22, r24
	#if defined	eight_bit_mode
{
	DIO_write_port(PORT_DATA,data);
 d40:	81 e4       	ldi	r24, 0x41	; 65
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	70 e0       	ldi	r23, 0x00	; 0
 d46:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <DIO_write_port>
	DIO_WRITE(PORT_CONTROL,RS,1);
 d4a:	82 e4       	ldi	r24, 0x42	; 66
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	61 e0       	ldi	r22, 0x01	; 1
 d50:	70 e0       	ldi	r23, 0x00	; 0
 d52:	41 e0       	ldi	r20, 0x01	; 1
 d54:	50 e0       	ldi	r21, 0x00	; 0
 d56:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_WRITE>
	enable();
 d5a:	0e 94 f5 05 	call	0xbea	; 0xbea <enable>
 d5e:	8f ec       	ldi	r24, 0xCF	; 207
 d60:	97 e0       	ldi	r25, 0x07	; 7
 d62:	01 97       	sbiw	r24, 0x01	; 1
 d64:	f1 f7       	brne	.-4      	; 0xd62 <LCD_vsend_char+0x24>
 d66:	00 c0       	rjmp	.+0      	; 0xd68 <LCD_vsend_char+0x2a>
 d68:	00 00       	nop
	DIO_WRITE(PORT_CONTROL,RS,1);
	enable();	
	}
	#endif
	_delay_ms(1);
}	
 d6a:	08 95       	ret

00000d6c <LCD_send_string>:
{
	LCD_vsend_cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_send_string(char *ptr)
{
 d6c:	cf 93       	push	r28
 d6e:	df 93       	push	r29
 d70:	ec 01       	movw	r28, r24
	while(*ptr != 0)
 d72:	88 81       	ld	r24, Y
 d74:	88 23       	and	r24, r24
 d76:	31 f0       	breq	.+12     	; 0xd84 <LCD_send_string+0x18>
void LCD_clearscreen(void)
{
	LCD_vsend_cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_send_string(char *ptr)
 d78:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr != 0)
	{
		LCD_vsend_char(*ptr);
 d7a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_vsend_char>
	LCD_vsend_cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_send_string(char *ptr)
{
	while(*ptr != 0)
 d7e:	89 91       	ld	r24, Y+
 d80:	88 23       	and	r24, r24
 d82:	d9 f7       	brne	.-10     	; 0xd7a <LCD_send_string+0xe>
	{
		LCD_vsend_char(*ptr);
		ptr++;
	}
}
 d84:	df 91       	pop	r29
 d86:	cf 91       	pop	r28
 d88:	08 95       	ret

00000d8a <__udivmodqi4>:
 d8a:	99 1b       	sub	r25, r25
 d8c:	79 e0       	ldi	r23, 0x09	; 9
 d8e:	04 c0       	rjmp	.+8      	; 0xd98 <__udivmodqi4_ep>

00000d90 <__udivmodqi4_loop>:
 d90:	99 1f       	adc	r25, r25
 d92:	96 17       	cp	r25, r22
 d94:	08 f0       	brcs	.+2      	; 0xd98 <__udivmodqi4_ep>
 d96:	96 1b       	sub	r25, r22

00000d98 <__udivmodqi4_ep>:
 d98:	88 1f       	adc	r24, r24
 d9a:	7a 95       	dec	r23
 d9c:	c9 f7       	brne	.-14     	; 0xd90 <__udivmodqi4_loop>
 d9e:	80 95       	com	r24
 da0:	08 95       	ret

00000da2 <__udivmodhi4>:
 da2:	aa 1b       	sub	r26, r26
 da4:	bb 1b       	sub	r27, r27
 da6:	51 e1       	ldi	r21, 0x11	; 17
 da8:	07 c0       	rjmp	.+14     	; 0xdb8 <__udivmodhi4_ep>

00000daa <__udivmodhi4_loop>:
 daa:	aa 1f       	adc	r26, r26
 dac:	bb 1f       	adc	r27, r27
 dae:	a6 17       	cp	r26, r22
 db0:	b7 07       	cpc	r27, r23
 db2:	10 f0       	brcs	.+4      	; 0xdb8 <__udivmodhi4_ep>
 db4:	a6 1b       	sub	r26, r22
 db6:	b7 0b       	sbc	r27, r23

00000db8 <__udivmodhi4_ep>:
 db8:	88 1f       	adc	r24, r24
 dba:	99 1f       	adc	r25, r25
 dbc:	5a 95       	dec	r21
 dbe:	a9 f7       	brne	.-22     	; 0xdaa <__udivmodhi4_loop>
 dc0:	80 95       	com	r24
 dc2:	90 95       	com	r25
 dc4:	bc 01       	movw	r22, r24
 dc6:	cd 01       	movw	r24, r26
 dc8:	08 95       	ret

00000dca <_exit>:
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>
